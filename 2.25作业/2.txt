七、请简述vue的双向数据绑定原理是什么
vue是采用数据劫持，并且使用发布-订阅者的开发模式。
原理是观察者observer通过Object.defineProperty()来劫持到各个属性的getter setter，
在数据变动的时候，会被observer观察到，
会通过Dep通知数据的订阅者watcher，之后进行相应的视图上面的变化。
八、闭包的3种特性
①.封闭性：外界无法访问闭包内部的数据，如果在闭包内声明变量，外界是无法访问的，除非闭包主动向外界提供访问接口；
②.持久性：一般的函数，调用完毕之后，系统自动注销函数，而对于闭包来说，在外部函数被调用之后，闭包结构依然保存在
系统中，闭包中的数据依然存在，从而实现对数据的持久使用。
优点：
① 减少全局变量。
② 减少传递函数的参数量
③ 封装；
缺点：
使用闭包会占有内存资源，过多的使用闭包会导致内存溢出等.
九、var numbers = [1,2,3,4],将numbers转换成“-”连接起来的字符串 
var numbers=[1,2,3,4];
numbers.map(function(item,index){
   console.log(item+”-”+index);
})
十、请详细说你对vue生命周期的理解
创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和**数据对象**data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。
载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。
更新前/后：当data变化时，会触发beforeUpdate和updated方法。
销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在
十一、请说下vue组件间的传值
1.父组件向子组件传递数据
在 Vue 中，可以使用 props 向子组件传递数据。
2.子组件向父组件传递数据
 子组件主要通过事件传递数据给父组件
3.子组件向子组件传递数据
Vue 没有直接子对子传参的方法，建议将需要传递数据的子组件，都合并为一个组件。
如果一定需要子对子传参，可以先从传到父组件，再传到子组件。
十二、浏览器本地存储有哪几种，区别是什么？
sessionStorage，只会在窗口打开的时候才有效，一次性缓存会话，关闭浏览器自动释放
localStorage，只要没有手动清除，就会一直保留，永久存储，以文件形式存储
cookie,是用来跟踪用户信息的，默认只是一次性会话，维持到浏览器关闭